{"uid":"7e036c064fc8ca32","name":"test_search_with_no_results","fullName":"tests.integration.test_mem0_smoke.TestMem0Smoke#test_search_with_no_results","historyId":"057503498d66d1a2f7529a469e17d5d5","time":{"start":1748211862281,"stop":1748211862965,"duration":684},"description":"Test searching for content that doesn't exist.","descriptionHtml":"<p>Test searching for content that doesn't exist.</p>\n","status":"failed","statusMessage":"Failed: Search should handle non-existent content gracefully: Search should always return a list\nassert False\n +  where False = isinstance({'results': []}, list)","statusTrace":"self = <test_mem0_smoke.TestMem0Smoke object at 0x106d9a1b0>\nmemory_instance = <mem0.memory.main.Memory object at 0x106d9ab10>\n\n    @allure.story(\"Error Handling\")\n    @allure.severity(allure.severity_level.MINOR)\n    def test_search_with_no_results(self, memory_instance: Memory):\n        \"\"\"Test searching for content that doesn't exist.\"\"\"\n        test_user_id = \"test_user_789\"\n        with allure.step(\"Search for non-existent content\"):\n            try:\n                results = memory_instance.search(\"completely unrelated quantum physics unicorns\", user_id=test_user_id)\n    \n                allure.attach(\n                    str(results),\n                    name=\"No Results Search\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n                # Even if no exact matches, the system should return some results or an empty list\n>               assert isinstance(results, list), \"Search should always return a list\"\nE               AssertionError: Search should always return a list\nE               assert False\nE                +  where False = isinstance({'results': []}, list)\n\ntests/integration/test_mem0_smoke.py:279: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_mem0_smoke.TestMem0Smoke object at 0x106d9a1b0>\nmemory_instance = <mem0.memory.main.Memory object at 0x106d9ab10>\n\n    @allure.story(\"Error Handling\")\n    @allure.severity(allure.severity_level.MINOR)\n    def test_search_with_no_results(self, memory_instance: Memory):\n        \"\"\"Test searching for content that doesn't exist.\"\"\"\n        test_user_id = \"test_user_789\"\n        with allure.step(\"Search for non-existent content\"):\n            try:\n                results = memory_instance.search(\"completely unrelated quantum physics unicorns\", user_id=test_user_id)\n    \n                allure.attach(\n                    str(results),\n                    name=\"No Results Search\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n                # Even if no exact matches, the system should return some results or an empty list\n                assert isinstance(results, list), \"Search should always return a list\"\n                # Note: Vector search might still return results based on similarity, so we don't assert empty\n    \n            except Exception as e:\n>               pytest.fail(f\"Search should handle non-existent content gracefully: {str(e)}\")\nE               Failed: Search should handle non-existent content gracefully: Search should always return a list\nE               assert False\nE                +  where False = isinstance({'results': []}, list)\n\ntests/integration/test_mem0_smoke.py:283: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_environment","time":{"start":1748211851816,"stop":1748211851817,"duration":1},"status":"passed","steps":[{"name":"Load environment variables","time":{"start":1748211851816,"stop":1748211851817,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Validate required environment variables","time":{"start":1748211851817,"stop":1748211851817,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"123b9aa4c2d042d8","name":"Qdrant Configuration","source":"123b9aa4c2d042d8.txt","type":"text/plain","size":40}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"qdrant_health_check","time":{"start":1748211851817,"stop":1748211851832,"duration":15},"status":"passed","steps":[{"name":"Check Qdrant health","time":{"start":1748211851817,"stop":1748211851832,"duration":15},"status":"passed","steps":[],"attachments":[{"uid":"864d2b356c9daa2d","name":"Qdrant Collections Response","source":"864d2b356c9daa2d.json","type":"application/json","size":120}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"memory_instance","time":{"start":1748211851832,"stop":1748211852009,"duration":177},"status":"passed","steps":[{"name":"Initialize Memory layer with Qdrant","time":{"start":1748211851832,"stop":1748211852009,"duration":177},"status":"passed","steps":[],"attachments":[{"uid":"54b212cbab2a3058","name":"Memory Configuration","source":"54b212cbab2a3058.json","type":"application/json","size":131},{"uid":"7b85aa660aaf16ac","name":"Memory Initialization","source":"7b85aa660aaf16ac.txt","type":"text/plain","size":53}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"Test searching for content that doesn't exist.","status":"failed","statusMessage":"Failed: Search should handle non-existent content gracefully: Search should always return a list\nassert False\n +  where False = isinstance({'results': []}, list)","statusTrace":"self = <test_mem0_smoke.TestMem0Smoke object at 0x106d9a1b0>\nmemory_instance = <mem0.memory.main.Memory object at 0x106d9ab10>\n\n    @allure.story(\"Error Handling\")\n    @allure.severity(allure.severity_level.MINOR)\n    def test_search_with_no_results(self, memory_instance: Memory):\n        \"\"\"Test searching for content that doesn't exist.\"\"\"\n        test_user_id = \"test_user_789\"\n        with allure.step(\"Search for non-existent content\"):\n            try:\n                results = memory_instance.search(\"completely unrelated quantum physics unicorns\", user_id=test_user_id)\n    \n                allure.attach(\n                    str(results),\n                    name=\"No Results Search\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n                # Even if no exact matches, the system should return some results or an empty list\n>               assert isinstance(results, list), \"Search should always return a list\"\nE               AssertionError: Search should always return a list\nE               assert False\nE                +  where False = isinstance({'results': []}, list)\n\ntests/integration/test_mem0_smoke.py:279: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_mem0_smoke.TestMem0Smoke object at 0x106d9a1b0>\nmemory_instance = <mem0.memory.main.Memory object at 0x106d9ab10>\n\n    @allure.story(\"Error Handling\")\n    @allure.severity(allure.severity_level.MINOR)\n    def test_search_with_no_results(self, memory_instance: Memory):\n        \"\"\"Test searching for content that doesn't exist.\"\"\"\n        test_user_id = \"test_user_789\"\n        with allure.step(\"Search for non-existent content\"):\n            try:\n                results = memory_instance.search(\"completely unrelated quantum physics unicorns\", user_id=test_user_id)\n    \n                allure.attach(\n                    str(results),\n                    name=\"No Results Search\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n                # Even if no exact matches, the system should return some results or an empty list\n                assert isinstance(results, list), \"Search should always return a list\"\n                # Note: Vector search might still return results based on similarity, so we don't assert empty\n    \n            except Exception as e:\n>               pytest.fail(f\"Search should handle non-existent content gracefully: {str(e)}\")\nE               Failed: Search should handle non-existent content gracefully: Search should always return a list\nE               assert False\nE                +  where False = isinstance({'results': []}, list)\n\ntests/integration/test_mem0_smoke.py:283: Failed","steps":[{"name":"Search for non-existent content","time":{"start":1748211862281,"stop":1748211862964,"duration":683},"status":"failed","statusMessage":"Failed: Search should handle non-existent content gracefully: Search should always return a list\nassert False\n +  where False = isinstance({'results': []}, list)\n","statusTrace":"  File \"/Users/samisabir-idrissi/code/ssiautomationsapps/mem01-ai-tutor/tests/integration/test_mem0_smoke.py\", line 283, in test_search_with_no_results\n    pytest.fail(f\"Search should handle non-existent content gracefully: {str(e)}\")\n  File \"/Users/samisabir-idrissi/code/ssiautomationsapps/mem01-ai-tutor/.venv/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[{"uid":"4b19b07856d6a29f","name":"No Results Search","source":"4b19b07856d6a29f.json","type":"application/json","size":15}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"4f6856463a8bfb49","name":"Exception","source":"4f6856463a8bfb49.txt","type":"text/plain","size":153},{"uid":"9557065a71bf7ffb","name":"log","source":"9557065a71bf7ffb.txt","type":"text/plain","size":392}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":3,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"severity","value":"minor"},{"name":"epic","value":"Memory Management"},{"name":"story","value":"Error Handling"},{"name":"feature","value":"Mem0 Vector Database Integration"},{"name":"parentSuite","value":"tests.integration"},{"name":"suite","value":"test_mem0_smoke"},{"name":"subSuite","value":"TestMem0Smoke"},{"name":"host","value":"samis-MacBook-Pro.local"},{"name":"thread","value":"9606-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.integration.test_mem0_smoke"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"7e036c064fc8ca32.json","parameterValues":[]}