{"uid":"73bf7387b5be31b7","name":"test_memory_configuration","fullName":"tests.integration.test_mem0_smoke.TestMem0Smoke#test_memory_configuration","historyId":"04484fe4f73ac9b66b978f6527f8c654","time":{"start":1748211862980,"stop":1748211863165,"duration":185},"description":"Test that memory instance is properly configured.","descriptionHtml":"<p>Test that memory instance is properly configured.</p>\n","status":"failed","statusMessage":"Failed: Memory instance is not properly configured: Search should return a list\nassert False\n +  where False = isinstance({'results': []}, list)","statusTrace":"self = <test_mem0_smoke.TestMem0Smoke object at 0x106d9a330>\nmemory_instance = <mem0.memory.main.Memory object at 0x106d9ab10>\n\n    @allure.story(\"Configuration Validation\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_memory_configuration(self, memory_instance: Memory):\n        \"\"\"Test that memory instance is properly configured.\"\"\"\n        test_user_id = \"test_user_config\"\n        with allure.step(\"Validate memory instance\"):\n            assert memory_instance is not None, \"Memory instance should not be None\"\n    \n            # Test that we can perform basic operations\n            try:\n                # This should not raise an exception\n                test_result = memory_instance.search(\"test\", user_id=test_user_id)\n>               assert isinstance(test_result, list), \"Search should return a list\"\nE               AssertionError: Search should return a list\nE               assert False\nE                +  where False = isinstance({'results': []}, list)\n\ntests/integration/test_mem0_smoke.py:297: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_mem0_smoke.TestMem0Smoke object at 0x106d9a330>\nmemory_instance = <mem0.memory.main.Memory object at 0x106d9ab10>\n\n    @allure.story(\"Configuration Validation\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_memory_configuration(self, memory_instance: Memory):\n        \"\"\"Test that memory instance is properly configured.\"\"\"\n        test_user_id = \"test_user_config\"\n        with allure.step(\"Validate memory instance\"):\n            assert memory_instance is not None, \"Memory instance should not be None\"\n    \n            # Test that we can perform basic operations\n            try:\n                # This should not raise an exception\n                test_result = memory_instance.search(\"test\", user_id=test_user_id)\n                assert isinstance(test_result, list), \"Search should return a list\"\n    \n                allure.attach(\n                    \"✅ Memory instance is properly configured and functional\",\n                    name=\"Configuration Validation\",\n                    attachment_type=allure.attachment_type.TEXT\n                )\n    \n            except Exception as e:\n>               pytest.fail(f\"Memory instance is not properly configured: {str(e)}\")\nE               Failed: Memory instance is not properly configured: Search should return a list\nE               assert False\nE                +  where False = isinstance({'results': []}, list)\n\ntests/integration/test_mem0_smoke.py:306: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_environment","time":{"start":1748211851816,"stop":1748211851817,"duration":1},"status":"passed","steps":[{"name":"Load environment variables","time":{"start":1748211851816,"stop":1748211851817,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Validate required environment variables","time":{"start":1748211851817,"stop":1748211851817,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"123b9aa4c2d042d8","name":"Qdrant Configuration","source":"123b9aa4c2d042d8.txt","type":"text/plain","size":40}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"qdrant_health_check","time":{"start":1748211851817,"stop":1748211851832,"duration":15},"status":"passed","steps":[{"name":"Check Qdrant health","time":{"start":1748211851817,"stop":1748211851832,"duration":15},"status":"passed","steps":[],"attachments":[{"uid":"864d2b356c9daa2d","name":"Qdrant Collections Response","source":"864d2b356c9daa2d.json","type":"application/json","size":120}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"memory_instance","time":{"start":1748211851832,"stop":1748211852009,"duration":177},"status":"passed","steps":[{"name":"Initialize Memory layer with Qdrant","time":{"start":1748211851832,"stop":1748211852009,"duration":177},"status":"passed","steps":[],"attachments":[{"uid":"54b212cbab2a3058","name":"Memory Configuration","source":"54b212cbab2a3058.json","type":"application/json","size":131},{"uid":"7b85aa660aaf16ac","name":"Memory Initialization","source":"7b85aa660aaf16ac.txt","type":"text/plain","size":53}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"Test that memory instance is properly configured.","status":"failed","statusMessage":"Failed: Memory instance is not properly configured: Search should return a list\nassert False\n +  where False = isinstance({'results': []}, list)","statusTrace":"self = <test_mem0_smoke.TestMem0Smoke object at 0x106d9a330>\nmemory_instance = <mem0.memory.main.Memory object at 0x106d9ab10>\n\n    @allure.story(\"Configuration Validation\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_memory_configuration(self, memory_instance: Memory):\n        \"\"\"Test that memory instance is properly configured.\"\"\"\n        test_user_id = \"test_user_config\"\n        with allure.step(\"Validate memory instance\"):\n            assert memory_instance is not None, \"Memory instance should not be None\"\n    \n            # Test that we can perform basic operations\n            try:\n                # This should not raise an exception\n                test_result = memory_instance.search(\"test\", user_id=test_user_id)\n>               assert isinstance(test_result, list), \"Search should return a list\"\nE               AssertionError: Search should return a list\nE               assert False\nE                +  where False = isinstance({'results': []}, list)\n\ntests/integration/test_mem0_smoke.py:297: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_mem0_smoke.TestMem0Smoke object at 0x106d9a330>\nmemory_instance = <mem0.memory.main.Memory object at 0x106d9ab10>\n\n    @allure.story(\"Configuration Validation\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_memory_configuration(self, memory_instance: Memory):\n        \"\"\"Test that memory instance is properly configured.\"\"\"\n        test_user_id = \"test_user_config\"\n        with allure.step(\"Validate memory instance\"):\n            assert memory_instance is not None, \"Memory instance should not be None\"\n    \n            # Test that we can perform basic operations\n            try:\n                # This should not raise an exception\n                test_result = memory_instance.search(\"test\", user_id=test_user_id)\n                assert isinstance(test_result, list), \"Search should return a list\"\n    \n                allure.attach(\n                    \"✅ Memory instance is properly configured and functional\",\n                    name=\"Configuration Validation\",\n                    attachment_type=allure.attachment_type.TEXT\n                )\n    \n            except Exception as e:\n>               pytest.fail(f\"Memory instance is not properly configured: {str(e)}\")\nE               Failed: Memory instance is not properly configured: Search should return a list\nE               assert False\nE                +  where False = isinstance({'results': []}, list)\n\ntests/integration/test_mem0_smoke.py:306: Failed","steps":[{"name":"Validate memory instance","time":{"start":1748211862980,"stop":1748211863165,"duration":185},"status":"failed","statusMessage":"Failed: Memory instance is not properly configured: Search should return a list\nassert False\n +  where False = isinstance({'results': []}, list)\n","statusTrace":"  File \"/Users/samisabir-idrissi/code/ssiautomationsapps/mem01-ai-tutor/tests/integration/test_mem0_smoke.py\", line 306, in test_memory_configuration\n    pytest.fail(f\"Memory instance is not properly configured: {str(e)}\")\n  File \"/Users/samisabir-idrissi/code/ssiautomationsapps/mem01-ai-tutor/.venv/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"6f0402ea3c9b5b","name":"Exception","source":"6f0402ea3c9b5b.txt","type":"text/plain","size":136},{"uid":"daf98adbb47473da","name":"log","source":"daf98adbb47473da.txt","type":"text/plain","size":392}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"severity","value":"normal"},{"name":"story","value":"Configuration Validation"},{"name":"epic","value":"Memory Management"},{"name":"feature","value":"Mem0 Vector Database Integration"},{"name":"parentSuite","value":"tests.integration"},{"name":"suite","value":"test_mem0_smoke"},{"name":"subSuite","value":"TestMem0Smoke"},{"name":"host","value":"samis-MacBook-Pro.local"},{"name":"thread","value":"9606-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.integration.test_mem0_smoke"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"73bf7387b5be31b7.json","parameterValues":[]}