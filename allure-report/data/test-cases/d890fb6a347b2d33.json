{"uid":"d890fb6a347b2d33","name":"test_multiple_memories_and_search","fullName":"tests.integration.test_mem0_smoke.TestMem0Smoke#test_multiple_memories_and_search","historyId":"02613aaa38f5cb703862d0414892cc1e","time":{"start":1748211940365,"stop":1748211946278,"duration":5913},"description":"Test adding multiple memories and searching with different queries.","descriptionHtml":"<p>Test adding multiple memories and searching with different queries.</p>\n","status":"failed","statusMessage":"Failed: Failed to search for AI memories: Should find memories related to AI\nassert False","statusTrace":"self = <test_mem0_smoke.TestMem0Smoke object at 0x1094adeb0>\nmemory_instance = <mem0.memory.main.Memory object at 0x1094ae7b0>\n\n    @allure.story(\"Memory Persistence\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_multiple_memories_and_search(self, memory_instance: Memory):\n        \"\"\"Test adding multiple memories and searching with different queries.\"\"\"\n        test_user_id = \"test_user_456\"\n        memories = [\n            {\"text\": \"I love programming in Python\", \"metadata\": {\"topic\": \"programming\"}},\n            {\"text\": \"Machine learning is fascinating\", \"metadata\": {\"topic\": \"ai\"}},\n            {\"text\": \"Vector databases are powerful for similarity search\", \"metadata\": {\"topic\": \"database\"}},\n        ]\n    \n        with allure.step(\"Add multiple memories\"):\n            for i, memory_data in enumerate(memories):\n                try:\n                    result = memory_instance.add(memory_data[\"text\"], user_id=test_user_id, metadata=memory_data[\"metadata\"])\n                    assert result is not None, f\"Failed to add memory {i+1}\"\n    \n                    allure.attach(\n                        f\"Memory {i+1}: {memory_data['text']}\",\n                        name=f\"Added Memory {i+1}\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n                except Exception as e:\n                    pytest.fail(f\"Failed to add memory {i+1}: {str(e)}\")\n    \n        with allure.step(\"Search for programming-related memories\"):\n            try:\n                programming_response = memory_instance.search(\"Python programming\", user_id=test_user_id)\n    \n                allure.attach(\n                    str(programming_response),\n                    name=\"Programming Search Results\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n                assert isinstance(programming_response, dict), \"Search response should be a dictionary\"\n                assert \"results\" in programming_response, \"Search response should contain 'results' field\"\n    \n                programming_results = programming_response[\"results\"]\n                assert isinstance(programming_results, list), \"Search results should be a list\"\n                assert len(programming_results) > 0, \"Should find programming-related memories\"\n    \n                # Verify at least one result contains programming-related content\n                programming_found = any(\n                    any(term in result.get(\"memory\", \"\").lower() for term in [\"python\", \"programming\"])\n                    for result in programming_results\n                )\n                assert programming_found, \"Should find memories related to programming\"\n    \n            except Exception as e:\n                pytest.fail(f\"Failed to search for programming memories: {str(e)}\")\n    \n        with allure.step(\"Search for AI-related memories\"):\n            try:\n                ai_response = memory_instance.search(\"artificial intelligence machine learning\", user_id=test_user_id)\n    \n                allure.attach(\n                    str(ai_response),\n                    name=\"AI Search Results\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n                assert isinstance(ai_response, dict), \"Search response should be a dictionary\"\n                assert \"results\" in ai_response, \"Search response should contain 'results' field\"\n    \n                ai_results = ai_response[\"results\"]\n                assert isinstance(ai_results, list), \"Search results should be a list\"\n                assert len(ai_results) > 0, \"Should find AI-related memories\"\n    \n                # Verify at least one result contains AI-related content\n                ai_found = any(\n                    any(term in result.get(\"memory\", \"\").lower() for term in [\"machine\", \"learning\", \"ai\"])\n                    for result in ai_results\n                )\n>               assert ai_found, \"Should find memories related to AI\"\nE               AssertionError: Should find memories related to AI\nE               assert False\n\ntests/integration/test_mem0_smoke.py:270: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_mem0_smoke.TestMem0Smoke object at 0x1094adeb0>\nmemory_instance = <mem0.memory.main.Memory object at 0x1094ae7b0>\n\n    @allure.story(\"Memory Persistence\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_multiple_memories_and_search(self, memory_instance: Memory):\n        \"\"\"Test adding multiple memories and searching with different queries.\"\"\"\n        test_user_id = \"test_user_456\"\n        memories = [\n            {\"text\": \"I love programming in Python\", \"metadata\": {\"topic\": \"programming\"}},\n            {\"text\": \"Machine learning is fascinating\", \"metadata\": {\"topic\": \"ai\"}},\n            {\"text\": \"Vector databases are powerful for similarity search\", \"metadata\": {\"topic\": \"database\"}},\n        ]\n    \n        with allure.step(\"Add multiple memories\"):\n            for i, memory_data in enumerate(memories):\n                try:\n                    result = memory_instance.add(memory_data[\"text\"], user_id=test_user_id, metadata=memory_data[\"metadata\"])\n                    assert result is not None, f\"Failed to add memory {i+1}\"\n    \n                    allure.attach(\n                        f\"Memory {i+1}: {memory_data['text']}\",\n                        name=f\"Added Memory {i+1}\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n                except Exception as e:\n                    pytest.fail(f\"Failed to add memory {i+1}: {str(e)}\")\n    \n        with allure.step(\"Search for programming-related memories\"):\n            try:\n                programming_response = memory_instance.search(\"Python programming\", user_id=test_user_id)\n    \n                allure.attach(\n                    str(programming_response),\n                    name=\"Programming Search Results\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n                assert isinstance(programming_response, dict), \"Search response should be a dictionary\"\n                assert \"results\" in programming_response, \"Search response should contain 'results' field\"\n    \n                programming_results = programming_response[\"results\"]\n                assert isinstance(programming_results, list), \"Search results should be a list\"\n                assert len(programming_results) > 0, \"Should find programming-related memories\"\n    \n                # Verify at least one result contains programming-related content\n                programming_found = any(\n                    any(term in result.get(\"memory\", \"\").lower() for term in [\"python\", \"programming\"])\n                    for result in programming_results\n                )\n                assert programming_found, \"Should find memories related to programming\"\n    \n            except Exception as e:\n                pytest.fail(f\"Failed to search for programming memories: {str(e)}\")\n    \n        with allure.step(\"Search for AI-related memories\"):\n            try:\n                ai_response = memory_instance.search(\"artificial intelligence machine learning\", user_id=test_user_id)\n    \n                allure.attach(\n                    str(ai_response),\n                    name=\"AI Search Results\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n                assert isinstance(ai_response, dict), \"Search response should be a dictionary\"\n                assert \"results\" in ai_response, \"Search response should contain 'results' field\"\n    \n                ai_results = ai_response[\"results\"]\n                assert isinstance(ai_results, list), \"Search results should be a list\"\n                assert len(ai_results) > 0, \"Should find AI-related memories\"\n    \n                # Verify at least one result contains AI-related content\n                ai_found = any(\n                    any(term in result.get(\"memory\", \"\").lower() for term in [\"machine\", \"learning\", \"ai\"])\n                    for result in ai_results\n                )\n                assert ai_found, \"Should find memories related to AI\"\n    \n            except Exception as e:\n>               pytest.fail(f\"Failed to search for AI memories: {str(e)}\")\nE               Failed: Failed to search for AI memories: Should find memories related to AI\nE               assert False\n\ntests/integration/test_mem0_smoke.py:273: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_environment","time":{"start":1748211937540,"stop":1748211937542,"duration":2},"status":"passed","steps":[{"name":"Load environment variables","time":{"start":1748211937541,"stop":1748211937541,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Validate required environment variables","time":{"start":1748211937541,"stop":1748211937542,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"bc3f605b8e1e4623","name":"Qdrant Configuration","source":"bc3f605b8e1e4623.txt","type":"text/plain","size":40}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"qdrant_health_check","time":{"start":1748211937542,"stop":1748211937555,"duration":13},"status":"passed","steps":[{"name":"Check Qdrant health","time":{"start":1748211937542,"stop":1748211937555,"duration":13},"status":"passed","steps":[],"attachments":[{"uid":"b9a7c32e94bac522","name":"Qdrant Collections Response","source":"b9a7c32e94bac522.json","type":"application/json","size":120}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"memory_instance","time":{"start":1748211937556,"stop":1748211937743,"duration":187},"status":"passed","steps":[{"name":"Initialize Memory layer with Qdrant","time":{"start":1748211937556,"stop":1748211937743,"duration":187},"status":"passed","steps":[],"attachments":[{"uid":"893ca0b5c4785516","name":"Memory Configuration","source":"893ca0b5c4785516.json","type":"application/json","size":131},{"uid":"51963ee43d4ccb63","name":"Memory Initialization","source":"51963ee43d4ccb63.txt","type":"text/plain","size":53}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"Test adding multiple memories and searching with different queries.","status":"failed","statusMessage":"Failed: Failed to search for AI memories: Should find memories related to AI\nassert False","statusTrace":"self = <test_mem0_smoke.TestMem0Smoke object at 0x1094adeb0>\nmemory_instance = <mem0.memory.main.Memory object at 0x1094ae7b0>\n\n    @allure.story(\"Memory Persistence\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_multiple_memories_and_search(self, memory_instance: Memory):\n        \"\"\"Test adding multiple memories and searching with different queries.\"\"\"\n        test_user_id = \"test_user_456\"\n        memories = [\n            {\"text\": \"I love programming in Python\", \"metadata\": {\"topic\": \"programming\"}},\n            {\"text\": \"Machine learning is fascinating\", \"metadata\": {\"topic\": \"ai\"}},\n            {\"text\": \"Vector databases are powerful for similarity search\", \"metadata\": {\"topic\": \"database\"}},\n        ]\n    \n        with allure.step(\"Add multiple memories\"):\n            for i, memory_data in enumerate(memories):\n                try:\n                    result = memory_instance.add(memory_data[\"text\"], user_id=test_user_id, metadata=memory_data[\"metadata\"])\n                    assert result is not None, f\"Failed to add memory {i+1}\"\n    \n                    allure.attach(\n                        f\"Memory {i+1}: {memory_data['text']}\",\n                        name=f\"Added Memory {i+1}\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n                except Exception as e:\n                    pytest.fail(f\"Failed to add memory {i+1}: {str(e)}\")\n    \n        with allure.step(\"Search for programming-related memories\"):\n            try:\n                programming_response = memory_instance.search(\"Python programming\", user_id=test_user_id)\n    \n                allure.attach(\n                    str(programming_response),\n                    name=\"Programming Search Results\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n                assert isinstance(programming_response, dict), \"Search response should be a dictionary\"\n                assert \"results\" in programming_response, \"Search response should contain 'results' field\"\n    \n                programming_results = programming_response[\"results\"]\n                assert isinstance(programming_results, list), \"Search results should be a list\"\n                assert len(programming_results) > 0, \"Should find programming-related memories\"\n    \n                # Verify at least one result contains programming-related content\n                programming_found = any(\n                    any(term in result.get(\"memory\", \"\").lower() for term in [\"python\", \"programming\"])\n                    for result in programming_results\n                )\n                assert programming_found, \"Should find memories related to programming\"\n    \n            except Exception as e:\n                pytest.fail(f\"Failed to search for programming memories: {str(e)}\")\n    \n        with allure.step(\"Search for AI-related memories\"):\n            try:\n                ai_response = memory_instance.search(\"artificial intelligence machine learning\", user_id=test_user_id)\n    \n                allure.attach(\n                    str(ai_response),\n                    name=\"AI Search Results\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n                assert isinstance(ai_response, dict), \"Search response should be a dictionary\"\n                assert \"results\" in ai_response, \"Search response should contain 'results' field\"\n    \n                ai_results = ai_response[\"results\"]\n                assert isinstance(ai_results, list), \"Search results should be a list\"\n                assert len(ai_results) > 0, \"Should find AI-related memories\"\n    \n                # Verify at least one result contains AI-related content\n                ai_found = any(\n                    any(term in result.get(\"memory\", \"\").lower() for term in [\"machine\", \"learning\", \"ai\"])\n                    for result in ai_results\n                )\n>               assert ai_found, \"Should find memories related to AI\"\nE               AssertionError: Should find memories related to AI\nE               assert False\n\ntests/integration/test_mem0_smoke.py:270: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_mem0_smoke.TestMem0Smoke object at 0x1094adeb0>\nmemory_instance = <mem0.memory.main.Memory object at 0x1094ae7b0>\n\n    @allure.story(\"Memory Persistence\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_multiple_memories_and_search(self, memory_instance: Memory):\n        \"\"\"Test adding multiple memories and searching with different queries.\"\"\"\n        test_user_id = \"test_user_456\"\n        memories = [\n            {\"text\": \"I love programming in Python\", \"metadata\": {\"topic\": \"programming\"}},\n            {\"text\": \"Machine learning is fascinating\", \"metadata\": {\"topic\": \"ai\"}},\n            {\"text\": \"Vector databases are powerful for similarity search\", \"metadata\": {\"topic\": \"database\"}},\n        ]\n    \n        with allure.step(\"Add multiple memories\"):\n            for i, memory_data in enumerate(memories):\n                try:\n                    result = memory_instance.add(memory_data[\"text\"], user_id=test_user_id, metadata=memory_data[\"metadata\"])\n                    assert result is not None, f\"Failed to add memory {i+1}\"\n    \n                    allure.attach(\n                        f\"Memory {i+1}: {memory_data['text']}\",\n                        name=f\"Added Memory {i+1}\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n                except Exception as e:\n                    pytest.fail(f\"Failed to add memory {i+1}: {str(e)}\")\n    \n        with allure.step(\"Search for programming-related memories\"):\n            try:\n                programming_response = memory_instance.search(\"Python programming\", user_id=test_user_id)\n    \n                allure.attach(\n                    str(programming_response),\n                    name=\"Programming Search Results\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n                assert isinstance(programming_response, dict), \"Search response should be a dictionary\"\n                assert \"results\" in programming_response, \"Search response should contain 'results' field\"\n    \n                programming_results = programming_response[\"results\"]\n                assert isinstance(programming_results, list), \"Search results should be a list\"\n                assert len(programming_results) > 0, \"Should find programming-related memories\"\n    \n                # Verify at least one result contains programming-related content\n                programming_found = any(\n                    any(term in result.get(\"memory\", \"\").lower() for term in [\"python\", \"programming\"])\n                    for result in programming_results\n                )\n                assert programming_found, \"Should find memories related to programming\"\n    \n            except Exception as e:\n                pytest.fail(f\"Failed to search for programming memories: {str(e)}\")\n    \n        with allure.step(\"Search for AI-related memories\"):\n            try:\n                ai_response = memory_instance.search(\"artificial intelligence machine learning\", user_id=test_user_id)\n    \n                allure.attach(\n                    str(ai_response),\n                    name=\"AI Search Results\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n                assert isinstance(ai_response, dict), \"Search response should be a dictionary\"\n                assert \"results\" in ai_response, \"Search response should contain 'results' field\"\n    \n                ai_results = ai_response[\"results\"]\n                assert isinstance(ai_results, list), \"Search results should be a list\"\n                assert len(ai_results) > 0, \"Should find AI-related memories\"\n    \n                # Verify at least one result contains AI-related content\n                ai_found = any(\n                    any(term in result.get(\"memory\", \"\").lower() for term in [\"machine\", \"learning\", \"ai\"])\n                    for result in ai_results\n                )\n                assert ai_found, \"Should find memories related to AI\"\n    \n            except Exception as e:\n>               pytest.fail(f\"Failed to search for AI memories: {str(e)}\")\nE               Failed: Failed to search for AI memories: Should find memories related to AI\nE               assert False\n\ntests/integration/test_mem0_smoke.py:273: Failed","steps":[{"name":"Add multiple memories","time":{"start":1748211940365,"stop":1748211945462,"duration":5097},"status":"passed","steps":[],"attachments":[{"uid":"8456966124f1c11e","name":"Added Memory 1","source":"8456966124f1c11e.txt","type":"text/plain","size":38},{"uid":"2619e5e4e0d1ecf6","name":"Added Memory 2","source":"2619e5e4e0d1ecf6.txt","type":"text/plain","size":41},{"uid":"9a2fce5b3b389319","name":"Added Memory 3","source":"9a2fce5b3b389319.txt","type":"text/plain","size":61}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":3,"hasContent":true,"attachmentStep":false},{"name":"Search for programming-related memories","time":{"start":1748211945462,"stop":1748211946018,"duration":556},"status":"passed","steps":[],"attachments":[{"uid":"84c344901564a501","name":"Programming Search Results","source":"84c344901564a501.json","type":"application/json","size":302}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"Search for AI-related memories","time":{"start":1748211946018,"stop":1748211946275,"duration":257},"status":"failed","statusMessage":"Failed: Failed to search for AI memories: Should find memories related to AI\nassert False\n","statusTrace":"  File \"/Users/samisabir-idrissi/code/ssiautomationsapps/mem01-ai-tutor/tests/integration/test_mem0_smoke.py\", line 273, in test_multiple_memories_and_search\n    pytest.fail(f\"Failed to search for AI memories: {str(e)}\")\n  File \"/Users/samisabir-idrissi/code/ssiautomationsapps/mem01-ai-tutor/.venv/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[{"uid":"a3338d4d07f7de5b","name":"AI Search Results","source":"a3338d4d07f7de5b.json","type":"application/json","size":303}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"2811985c17edbe57","name":"Exception","source":"2811985c17edbe57.txt","type":"text/plain","size":81},{"uid":"99a9135bc2be6678","name":"log","source":"99a9135bc2be6678.txt","type":"text/plain","size":2505}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"severity","value":"normal"},{"name":"story","value":"Memory Persistence"},{"name":"epic","value":"Memory Management"},{"name":"feature","value":"Mem0 Vector Database Integration"},{"name":"parentSuite","value":"tests.integration"},{"name":"suite","value":"test_mem0_smoke"},{"name":"subSuite","value":"TestMem0Smoke"},{"name":"host","value":"samis-MacBook-Pro.local"},{"name":"thread","value":"11656-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.integration.test_mem0_smoke"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"d890fb6a347b2d33.json","parameterValues":[]}