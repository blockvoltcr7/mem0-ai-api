{"uid":"e7dd89ad1602f4ea","name":"test_multiple_memories_and_search","fullName":"tests.integration.test_mem0_smoke.TestMem0Smoke#test_multiple_memories_and_search","historyId":"02613aaa38f5cb703862d0414892cc1e","time":{"start":1748211855671,"stop":1748211862265,"duration":6594},"description":"Test adding multiple memories and searching with different queries.","descriptionHtml":"<p>Test adding multiple memories and searching with different queries.</p>\n","status":"failed","statusMessage":"Failed: Failed to search for programming memories: Search results should be a list\nassert False\n +  where False = isinstance({'results': [{'created_at': '2025-05-25T15:24:18.011809-07:00', 'hash': '83ee3590d180fcafa74646839fa856e1', 'id': 'f5e01972-bd95-4724-8e89-f7bc0436f9b7', 'memory': 'Loves programming in Python', ...}]}, list)","statusTrace":"self = <test_mem0_smoke.TestMem0Smoke object at 0x106d9a150>\nmemory_instance = <mem0.memory.main.Memory object at 0x106d9ab10>\n\n    @allure.story(\"Memory Persistence\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_multiple_memories_and_search(self, memory_instance: Memory):\n        \"\"\"Test adding multiple memories and searching with different queries.\"\"\"\n        test_user_id = \"test_user_456\"\n        memories = [\n            {\"text\": \"I love programming in Python\", \"metadata\": {\"topic\": \"programming\"}},\n            {\"text\": \"Machine learning is fascinating\", \"metadata\": {\"topic\": \"ai\"}},\n            {\"text\": \"Vector databases are powerful for similarity search\", \"metadata\": {\"topic\": \"database\"}},\n        ]\n    \n        with allure.step(\"Add multiple memories\"):\n            for i, memory_data in enumerate(memories):\n                try:\n                    result = memory_instance.add(memory_data[\"text\"], user_id=test_user_id, metadata=memory_data[\"metadata\"])\n                    assert result is not None, f\"Failed to add memory {i+1}\"\n    \n                    allure.attach(\n                        f\"Memory {i+1}: {memory_data['text']}\",\n                        name=f\"Added Memory {i+1}\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n                except Exception as e:\n                    pytest.fail(f\"Failed to add memory {i+1}: {str(e)}\")\n    \n        with allure.step(\"Search for programming-related memories\"):\n            try:\n                programming_results = memory_instance.search(\"Python programming\", user_id=test_user_id)\n    \n                allure.attach(\n                    str(programming_results),\n                    name=\"Programming Search Results\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n>               assert isinstance(programming_results, list), \"Search results should be a list\"\nE               AssertionError: Search results should be a list\nE               assert False\nE                +  where False = isinstance({'results': [{'created_at': '2025-05-25T15:24:18.011809-07:00', 'hash': '83ee3590d180fcafa74646839fa856e1', 'id': 'f5e01972-bd95-4724-8e89-f7bc0436f9b7', 'memory': 'Loves programming in Python', ...}]}, list)\n\ntests/integration/test_mem0_smoke.py:227: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_mem0_smoke.TestMem0Smoke object at 0x106d9a150>\nmemory_instance = <mem0.memory.main.Memory object at 0x106d9ab10>\n\n    @allure.story(\"Memory Persistence\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_multiple_memories_and_search(self, memory_instance: Memory):\n        \"\"\"Test adding multiple memories and searching with different queries.\"\"\"\n        test_user_id = \"test_user_456\"\n        memories = [\n            {\"text\": \"I love programming in Python\", \"metadata\": {\"topic\": \"programming\"}},\n            {\"text\": \"Machine learning is fascinating\", \"metadata\": {\"topic\": \"ai\"}},\n            {\"text\": \"Vector databases are powerful for similarity search\", \"metadata\": {\"topic\": \"database\"}},\n        ]\n    \n        with allure.step(\"Add multiple memories\"):\n            for i, memory_data in enumerate(memories):\n                try:\n                    result = memory_instance.add(memory_data[\"text\"], user_id=test_user_id, metadata=memory_data[\"metadata\"])\n                    assert result is not None, f\"Failed to add memory {i+1}\"\n    \n                    allure.attach(\n                        f\"Memory {i+1}: {memory_data['text']}\",\n                        name=f\"Added Memory {i+1}\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n                except Exception as e:\n                    pytest.fail(f\"Failed to add memory {i+1}: {str(e)}\")\n    \n        with allure.step(\"Search for programming-related memories\"):\n            try:\n                programming_results = memory_instance.search(\"Python programming\", user_id=test_user_id)\n    \n                allure.attach(\n                    str(programming_results),\n                    name=\"Programming Search Results\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n                assert isinstance(programming_results, list), \"Search results should be a list\"\n                assert len(programming_results) > 0, \"Should find programming-related memories\"\n    \n                # Verify at least one result contains programming-related content\n                programming_found = any(\n                    any(term in result.get(\"memory\", \"\").lower() for term in [\"python\", \"programming\"])\n                    for result in programming_results\n                )\n                assert programming_found, \"Should find memories related to programming\"\n    \n            except Exception as e:\n>               pytest.fail(f\"Failed to search for programming memories: {str(e)}\")\nE               Failed: Failed to search for programming memories: Search results should be a list\nE               assert False\nE                +  where False = isinstance({'results': [{'created_at': '2025-05-25T15:24:18.011809-07:00', 'hash': '83ee3590d180fcafa74646839fa856e1', 'id': 'f5e01972-bd95-4724-8e89-f7bc0436f9b7', 'memory': 'Loves programming in Python', ...}]}, list)\n\ntests/integration/test_mem0_smoke.py:238: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_environment","time":{"start":1748211851816,"stop":1748211851817,"duration":1},"status":"passed","steps":[{"name":"Load environment variables","time":{"start":1748211851816,"stop":1748211851817,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Validate required environment variables","time":{"start":1748211851817,"stop":1748211851817,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"123b9aa4c2d042d8","name":"Qdrant Configuration","source":"123b9aa4c2d042d8.txt","type":"text/plain","size":40}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"qdrant_health_check","time":{"start":1748211851817,"stop":1748211851832,"duration":15},"status":"passed","steps":[{"name":"Check Qdrant health","time":{"start":1748211851817,"stop":1748211851832,"duration":15},"status":"passed","steps":[],"attachments":[{"uid":"864d2b356c9daa2d","name":"Qdrant Collections Response","source":"864d2b356c9daa2d.json","type":"application/json","size":120}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"memory_instance","time":{"start":1748211851832,"stop":1748211852009,"duration":177},"status":"passed","steps":[{"name":"Initialize Memory layer with Qdrant","time":{"start":1748211851832,"stop":1748211852009,"duration":177},"status":"passed","steps":[],"attachments":[{"uid":"54b212cbab2a3058","name":"Memory Configuration","source":"54b212cbab2a3058.json","type":"application/json","size":131},{"uid":"7b85aa660aaf16ac","name":"Memory Initialization","source":"7b85aa660aaf16ac.txt","type":"text/plain","size":53}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"Test adding multiple memories and searching with different queries.","status":"failed","statusMessage":"Failed: Failed to search for programming memories: Search results should be a list\nassert False\n +  where False = isinstance({'results': [{'created_at': '2025-05-25T15:24:18.011809-07:00', 'hash': '83ee3590d180fcafa74646839fa856e1', 'id': 'f5e01972-bd95-4724-8e89-f7bc0436f9b7', 'memory': 'Loves programming in Python', ...}]}, list)","statusTrace":"self = <test_mem0_smoke.TestMem0Smoke object at 0x106d9a150>\nmemory_instance = <mem0.memory.main.Memory object at 0x106d9ab10>\n\n    @allure.story(\"Memory Persistence\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_multiple_memories_and_search(self, memory_instance: Memory):\n        \"\"\"Test adding multiple memories and searching with different queries.\"\"\"\n        test_user_id = \"test_user_456\"\n        memories = [\n            {\"text\": \"I love programming in Python\", \"metadata\": {\"topic\": \"programming\"}},\n            {\"text\": \"Machine learning is fascinating\", \"metadata\": {\"topic\": \"ai\"}},\n            {\"text\": \"Vector databases are powerful for similarity search\", \"metadata\": {\"topic\": \"database\"}},\n        ]\n    \n        with allure.step(\"Add multiple memories\"):\n            for i, memory_data in enumerate(memories):\n                try:\n                    result = memory_instance.add(memory_data[\"text\"], user_id=test_user_id, metadata=memory_data[\"metadata\"])\n                    assert result is not None, f\"Failed to add memory {i+1}\"\n    \n                    allure.attach(\n                        f\"Memory {i+1}: {memory_data['text']}\",\n                        name=f\"Added Memory {i+1}\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n                except Exception as e:\n                    pytest.fail(f\"Failed to add memory {i+1}: {str(e)}\")\n    \n        with allure.step(\"Search for programming-related memories\"):\n            try:\n                programming_results = memory_instance.search(\"Python programming\", user_id=test_user_id)\n    \n                allure.attach(\n                    str(programming_results),\n                    name=\"Programming Search Results\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n>               assert isinstance(programming_results, list), \"Search results should be a list\"\nE               AssertionError: Search results should be a list\nE               assert False\nE                +  where False = isinstance({'results': [{'created_at': '2025-05-25T15:24:18.011809-07:00', 'hash': '83ee3590d180fcafa74646839fa856e1', 'id': 'f5e01972-bd95-4724-8e89-f7bc0436f9b7', 'memory': 'Loves programming in Python', ...}]}, list)\n\ntests/integration/test_mem0_smoke.py:227: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_mem0_smoke.TestMem0Smoke object at 0x106d9a150>\nmemory_instance = <mem0.memory.main.Memory object at 0x106d9ab10>\n\n    @allure.story(\"Memory Persistence\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_multiple_memories_and_search(self, memory_instance: Memory):\n        \"\"\"Test adding multiple memories and searching with different queries.\"\"\"\n        test_user_id = \"test_user_456\"\n        memories = [\n            {\"text\": \"I love programming in Python\", \"metadata\": {\"topic\": \"programming\"}},\n            {\"text\": \"Machine learning is fascinating\", \"metadata\": {\"topic\": \"ai\"}},\n            {\"text\": \"Vector databases are powerful for similarity search\", \"metadata\": {\"topic\": \"database\"}},\n        ]\n    \n        with allure.step(\"Add multiple memories\"):\n            for i, memory_data in enumerate(memories):\n                try:\n                    result = memory_instance.add(memory_data[\"text\"], user_id=test_user_id, metadata=memory_data[\"metadata\"])\n                    assert result is not None, f\"Failed to add memory {i+1}\"\n    \n                    allure.attach(\n                        f\"Memory {i+1}: {memory_data['text']}\",\n                        name=f\"Added Memory {i+1}\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n                except Exception as e:\n                    pytest.fail(f\"Failed to add memory {i+1}: {str(e)}\")\n    \n        with allure.step(\"Search for programming-related memories\"):\n            try:\n                programming_results = memory_instance.search(\"Python programming\", user_id=test_user_id)\n    \n                allure.attach(\n                    str(programming_results),\n                    name=\"Programming Search Results\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n                assert isinstance(programming_results, list), \"Search results should be a list\"\n                assert len(programming_results) > 0, \"Should find programming-related memories\"\n    \n                # Verify at least one result contains programming-related content\n                programming_found = any(\n                    any(term in result.get(\"memory\", \"\").lower() for term in [\"python\", \"programming\"])\n                    for result in programming_results\n                )\n                assert programming_found, \"Should find memories related to programming\"\n    \n            except Exception as e:\n>               pytest.fail(f\"Failed to search for programming memories: {str(e)}\")\nE               Failed: Failed to search for programming memories: Search results should be a list\nE               assert False\nE                +  where False = isinstance({'results': [{'created_at': '2025-05-25T15:24:18.011809-07:00', 'hash': '83ee3590d180fcafa74646839fa856e1', 'id': 'f5e01972-bd95-4724-8e89-f7bc0436f9b7', 'memory': 'Loves programming in Python', ...}]}, list)\n\ntests/integration/test_mem0_smoke.py:238: Failed","steps":[{"name":"Add multiple memories","time":{"start":1748211855671,"stop":1748211861318,"duration":5647},"status":"passed","steps":[],"attachments":[{"uid":"19f176b54256be7d","name":"Added Memory 1","source":"19f176b54256be7d.txt","type":"text/plain","size":38},{"uid":"e5df555fbf6e9b35","name":"Added Memory 2","source":"e5df555fbf6e9b35.txt","type":"text/plain","size":41},{"uid":"57d9c18d583a7eea","name":"Added Memory 3","source":"57d9c18d583a7eea.txt","type":"text/plain","size":61}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":3,"hasContent":true,"attachmentStep":false},{"name":"Search for programming-related memories","time":{"start":1748211861318,"stop":1748211862264,"duration":946},"status":"failed","statusMessage":"Failed: Failed to search for programming memories: Search results should be a list\nassert False\n +  where False = isinstance({'results': [{'created_at': '2025-05-25T15:24:18.011809-07:00', 'hash': '83ee3590d180fcafa74646839fa856e1', 'id': 'f5e01972-bd95-4724-8e89-f7bc0436f9b7', 'memory': 'Loves programming in Python', ...}]}, list)\n","statusTrace":"  File \"/Users/samisabir-idrissi/code/ssiautomationsapps/mem01-ai-tutor/tests/integration/test_mem0_smoke.py\", line 238, in test_multiple_memories_and_search\n    pytest.fail(f\"Failed to search for programming memories: {str(e)}\")\n  File \"/Users/samisabir-idrissi/code/ssiautomationsapps/mem01-ai-tutor/.venv/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[{"uid":"e156f9721fa5f9a1","name":"Programming Search Results","source":"e156f9721fa5f9a1.json","type":"application/json","size":302}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"359539dc5e7ceb90","name":"Exception","source":"359539dc5e7ceb90.txt","type":"text/plain","size":325},{"uid":"da8143ea49a70969","name":"log","source":"da8143ea49a70969.txt","type":"text/plain","size":2457}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"severity","value":"normal"},{"name":"epic","value":"Memory Management"},{"name":"story","value":"Memory Persistence"},{"name":"feature","value":"Mem0 Vector Database Integration"},{"name":"parentSuite","value":"tests.integration"},{"name":"suite","value":"test_mem0_smoke"},{"name":"subSuite","value":"TestMem0Smoke"},{"name":"host","value":"samis-MacBook-Pro.local"},{"name":"thread","value":"9606-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.integration.test_mem0_smoke"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"e7dd89ad1602f4ea.json","parameterValues":[]}