{"uid":"4ef54ad8814f4739","name":"test_search_with_no_results","fullName":"tests.integration.test_mem0_smoke.TestMem0Smoke#test_search_with_no_results","historyId":"057503498d66d1a2f7529a469e17d5d5","time":{"start":1748211725298,"stop":1748211725298,"duration":0},"description":"Test searching for content that doesn't exist.","descriptionHtml":"<p>Test searching for content that doesn't exist.</p>\n","status":"failed","statusMessage":"Failed: Search should handle non-existent content gracefully: Memory.search() got an unexpected keyword argument 'k'","statusTrace":"self = <test_mem0_smoke.TestMem0Smoke object at 0x104d4b0e0>\nmemory_instance = <mem0.memory.main.Memory object at 0x104d43620>\n\n    @allure.story(\"Error Handling\")\n    @allure.severity(allure.severity_level.MINOR)\n    def test_search_with_no_results(self, memory_instance: Memory):\n        \"\"\"Test searching for content that doesn't exist.\"\"\"\n        with allure.step(\"Search for non-existent content\"):\n            try:\n>               results = memory_instance.search(\"completely unrelated quantum physics unicorns\", k=5)\nE               TypeError: Memory.search() got an unexpected keyword argument 'k'\n\ntests/integration/test_mem0_smoke.py:267: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_mem0_smoke.TestMem0Smoke object at 0x104d4b0e0>\nmemory_instance = <mem0.memory.main.Memory object at 0x104d43620>\n\n    @allure.story(\"Error Handling\")\n    @allure.severity(allure.severity_level.MINOR)\n    def test_search_with_no_results(self, memory_instance: Memory):\n        \"\"\"Test searching for content that doesn't exist.\"\"\"\n        with allure.step(\"Search for non-existent content\"):\n            try:\n                results = memory_instance.search(\"completely unrelated quantum physics unicorns\", k=5)\n    \n                allure.attach(\n                    str(results),\n                    name=\"No Results Search\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n                # Even if no exact matches, the system should return some results or an empty list\n                assert isinstance(results, list), \"Search should always return a list\"\n                # Note: Vector search might still return results based on similarity, so we don't assert empty\n    \n            except Exception as e:\n>               pytest.fail(f\"Search should handle non-existent content gracefully: {str(e)}\")\nE               Failed: Search should handle non-existent content gracefully: Memory.search() got an unexpected keyword argument 'k'\n\ntests/integration/test_mem0_smoke.py:280: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_environment","time":{"start":1748211724766,"stop":1748211724767,"duration":1},"status":"passed","steps":[{"name":"Load environment variables","time":{"start":1748211724766,"stop":1748211724766,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Validate required environment variables","time":{"start":1748211724766,"stop":1748211724767,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"cd3bd9c464dd0b4","name":"Qdrant Configuration","source":"cd3bd9c464dd0b4.txt","type":"text/plain","size":40}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"qdrant_health_check","time":{"start":1748211724767,"stop":1748211724783,"duration":16},"status":"passed","steps":[{"name":"Check Qdrant health","time":{"start":1748211724767,"stop":1748211724783,"duration":16},"status":"passed","steps":[],"attachments":[{"uid":"93612fc03102c04a","name":"Qdrant Collections Response","source":"93612fc03102c04a.json","type":"application/json","size":62}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"memory_instance","time":{"start":1748211724783,"stop":1748211725205,"duration":422},"status":"passed","steps":[{"name":"Initialize Memory layer with Qdrant","time":{"start":1748211724783,"stop":1748211725205,"duration":422},"status":"passed","steps":[],"attachments":[{"uid":"cf203a462af0f3bf","name":"Memory Configuration","source":"cf203a462af0f3bf.json","type":"application/json","size":131},{"uid":"8340585ddcec4a89","name":"Memory Initialization","source":"8340585ddcec4a89.txt","type":"text/plain","size":53}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"Test searching for content that doesn't exist.","status":"failed","statusMessage":"Failed: Search should handle non-existent content gracefully: Memory.search() got an unexpected keyword argument 'k'","statusTrace":"self = <test_mem0_smoke.TestMem0Smoke object at 0x104d4b0e0>\nmemory_instance = <mem0.memory.main.Memory object at 0x104d43620>\n\n    @allure.story(\"Error Handling\")\n    @allure.severity(allure.severity_level.MINOR)\n    def test_search_with_no_results(self, memory_instance: Memory):\n        \"\"\"Test searching for content that doesn't exist.\"\"\"\n        with allure.step(\"Search for non-existent content\"):\n            try:\n>               results = memory_instance.search(\"completely unrelated quantum physics unicorns\", k=5)\nE               TypeError: Memory.search() got an unexpected keyword argument 'k'\n\ntests/integration/test_mem0_smoke.py:267: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_mem0_smoke.TestMem0Smoke object at 0x104d4b0e0>\nmemory_instance = <mem0.memory.main.Memory object at 0x104d43620>\n\n    @allure.story(\"Error Handling\")\n    @allure.severity(allure.severity_level.MINOR)\n    def test_search_with_no_results(self, memory_instance: Memory):\n        \"\"\"Test searching for content that doesn't exist.\"\"\"\n        with allure.step(\"Search for non-existent content\"):\n            try:\n                results = memory_instance.search(\"completely unrelated quantum physics unicorns\", k=5)\n    \n                allure.attach(\n                    str(results),\n                    name=\"No Results Search\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n                # Even if no exact matches, the system should return some results or an empty list\n                assert isinstance(results, list), \"Search should always return a list\"\n                # Note: Vector search might still return results based on similarity, so we don't assert empty\n    \n            except Exception as e:\n>               pytest.fail(f\"Search should handle non-existent content gracefully: {str(e)}\")\nE               Failed: Search should handle non-existent content gracefully: Memory.search() got an unexpected keyword argument 'k'\n\ntests/integration/test_mem0_smoke.py:280: Failed","steps":[{"name":"Search for non-existent content","time":{"start":1748211725298,"stop":1748211725298,"duration":0},"status":"failed","statusMessage":"Failed: Search should handle non-existent content gracefully: Memory.search() got an unexpected keyword argument 'k'\n","statusTrace":"  File \"/Users/samisabir-idrissi/code/ssiautomationsapps/mem01-ai-tutor/tests/integration/test_mem0_smoke.py\", line 280, in test_search_with_no_results\n    pytest.fail(f\"Search should handle non-existent content gracefully: {str(e)}\")\n  File \"/Users/samisabir-idrissi/code/ssiautomationsapps/mem01-ai-tutor/.venv/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"945b5de526ca708b","name":"Exception","source":"945b5de526ca708b.txt","type":"text/plain","size":108}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"Memory Management"},{"name":"severity","value":"minor"},{"name":"feature","value":"Mem0 Vector Database Integration"},{"name":"story","value":"Error Handling"},{"name":"parentSuite","value":"tests.integration"},{"name":"suite","value":"test_mem0_smoke"},{"name":"subSuite","value":"TestMem0Smoke"},{"name":"host","value":"samis-MacBook-Pro.local"},{"name":"thread","value":"8876-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.integration.test_mem0_smoke"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"4ef54ad8814f4739.json","parameterValues":[]}