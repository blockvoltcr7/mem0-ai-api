{"uid":"c1b9b722df71b1ea","name":"test_add_and_search_memory","fullName":"tests.integration.test_mem0_smoke.TestMem0Smoke#test_add_and_search_memory","historyId":"a042e844400b0a24069d7c6e184bf753","time":{"start":1748211852010,"stop":1748211855578,"duration":3568},"description":"Test adding a memory entry and searching for it.","descriptionHtml":"<p>Test adding a memory entry and searching for it.</p>\n","status":"failed","statusMessage":"Failed: Failed to search memory: Search results should be a list\nassert False\n +  where False = isinstance({'results': [{'created_at': '2025-05-25T15:24:14.930900-07:00', 'hash': '99f952b2cc23dd84527b49b016c6303d', 'id': '69bb41f8-8a8b-441f-8502-c5e2ce729642', 'memory': 'First memory entry for testing', ...}]}, list)","statusTrace":"self = <test_mem0_smoke.TestMem0Smoke object at 0x106d59880>\nmemory_instance = <mem0.memory.main.Memory object at 0x106d9ab10>\n\n    @allure.story(\"Basic Memory Operations\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_add_and_search_memory(self, memory_instance: Memory):\n        \"\"\"Test adding a memory entry and searching for it.\"\"\"\n        test_memory_text = \"My first memory entry for testing\"\n        test_metadata = {\"test\": \"yes\", \"category\": \"smoke_test\"}\n        test_user_id = \"test_user_123\"\n    \n        with allure.step(\"Add a sample memory\"):\n            try:\n                result = memory_instance.add(test_memory_text, user_id=test_user_id, metadata=test_metadata)\n    \n                allure.attach(\n                    str(result),\n                    name=\"Add Memory Result\",\n                    attachment_type=allure.attachment_type.TEXT\n                )\n    \n                # Verify the add operation was successful\n                assert result is not None, \"Memory add operation returned None\"\n                print(\"✅ Added a memory successfully\")\n    \n            except Exception as e:\n                allure.attach(\n                    f\"❌ Failed to add memory: {str(e)}\",\n                    name=\"Add Memory Error\",\n                    attachment_type=allure.attachment_type.TEXT\n                )\n                pytest.fail(f\"Failed to add memory: {str(e)}\")\n    \n        with allure.step(\"Search for the added memory\"):\n            try:\n                search_results = memory_instance.search(\"first memory\", user_id=test_user_id)\n    \n                allure.attach(\n                    str(search_results),\n                    name=\"Search Results\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n                # Verify search results\n>               assert isinstance(search_results, list), \"Search results should be a list\"\nE               AssertionError: Search results should be a list\nE               assert False\nE                +  where False = isinstance({'results': [{'created_at': '2025-05-25T15:24:14.930900-07:00', 'hash': '99f952b2cc23dd84527b49b016c6303d', 'id': '69bb41f8-8a8b-441f-8502-c5e2ce729642', 'memory': 'First memory entry for testing', ...}]}, list)\n\ntests/integration/test_mem0_smoke.py:166: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_mem0_smoke.TestMem0Smoke object at 0x106d59880>\nmemory_instance = <mem0.memory.main.Memory object at 0x106d9ab10>\n\n    @allure.story(\"Basic Memory Operations\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_add_and_search_memory(self, memory_instance: Memory):\n        \"\"\"Test adding a memory entry and searching for it.\"\"\"\n        test_memory_text = \"My first memory entry for testing\"\n        test_metadata = {\"test\": \"yes\", \"category\": \"smoke_test\"}\n        test_user_id = \"test_user_123\"\n    \n        with allure.step(\"Add a sample memory\"):\n            try:\n                result = memory_instance.add(test_memory_text, user_id=test_user_id, metadata=test_metadata)\n    \n                allure.attach(\n                    str(result),\n                    name=\"Add Memory Result\",\n                    attachment_type=allure.attachment_type.TEXT\n                )\n    \n                # Verify the add operation was successful\n                assert result is not None, \"Memory add operation returned None\"\n                print(\"✅ Added a memory successfully\")\n    \n            except Exception as e:\n                allure.attach(\n                    f\"❌ Failed to add memory: {str(e)}\",\n                    name=\"Add Memory Error\",\n                    attachment_type=allure.attachment_type.TEXT\n                )\n                pytest.fail(f\"Failed to add memory: {str(e)}\")\n    \n        with allure.step(\"Search for the added memory\"):\n            try:\n                search_results = memory_instance.search(\"first memory\", user_id=test_user_id)\n    \n                allure.attach(\n                    str(search_results),\n                    name=\"Search Results\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n                # Verify search results\n                assert isinstance(search_results, list), \"Search results should be a list\"\n                assert len(search_results) > 0, \"Search should return at least one result\"\n    \n                # Verify the content of the first result\n                first_result = search_results[0]\n                assert \"memory\" in first_result, \"Search result should contain 'memory' field\"\n    \n                result_text = first_result[\"memory\"]\n                assert isinstance(result_text, str), \"Result text should be a string\"\n                assert len(result_text) > 0, \"Result text should not be empty\"\n    \n                # Verify the search found relevant content\n                search_terms = [\"first\", \"memory\"]\n                found_relevant = any(term.lower() in result_text.lower() for term in search_terms)\n                assert found_relevant, f\"Search result '{result_text}' should contain relevant terms\"\n    \n                print(f\"\uD83D\uDD0D Search results: {[r['memory'] for r in search_results]}\")\n    \n            except Exception as e:\n                allure.attach(\n                    f\"❌ Failed to search memory: {str(e)}\",\n                    name=\"Search Memory Error\",\n                    attachment_type=allure.attachment_type.TEXT\n                )\n>               pytest.fail(f\"Failed to search memory: {str(e)}\")\nE               Failed: Failed to search memory: Search results should be a list\nE               assert False\nE                +  where False = isinstance({'results': [{'created_at': '2025-05-25T15:24:14.930900-07:00', 'hash': '99f952b2cc23dd84527b49b016c6303d', 'id': '69bb41f8-8a8b-441f-8502-c5e2ce729642', 'memory': 'First memory entry for testing', ...}]}, list)\n\ntests/integration/test_mem0_smoke.py:190: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_environment","time":{"start":1748211851816,"stop":1748211851817,"duration":1},"status":"passed","steps":[{"name":"Load environment variables","time":{"start":1748211851816,"stop":1748211851817,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Validate required environment variables","time":{"start":1748211851817,"stop":1748211851817,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"123b9aa4c2d042d8","name":"Qdrant Configuration","source":"123b9aa4c2d042d8.txt","type":"text/plain","size":40}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"qdrant_health_check","time":{"start":1748211851817,"stop":1748211851832,"duration":15},"status":"passed","steps":[{"name":"Check Qdrant health","time":{"start":1748211851817,"stop":1748211851832,"duration":15},"status":"passed","steps":[],"attachments":[{"uid":"864d2b356c9daa2d","name":"Qdrant Collections Response","source":"864d2b356c9daa2d.json","type":"application/json","size":120}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"memory_instance","time":{"start":1748211851832,"stop":1748211852009,"duration":177},"status":"passed","steps":[{"name":"Initialize Memory layer with Qdrant","time":{"start":1748211851832,"stop":1748211852009,"duration":177},"status":"passed","steps":[],"attachments":[{"uid":"54b212cbab2a3058","name":"Memory Configuration","source":"54b212cbab2a3058.json","type":"application/json","size":131},{"uid":"7b85aa660aaf16ac","name":"Memory Initialization","source":"7b85aa660aaf16ac.txt","type":"text/plain","size":53}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"Test adding a memory entry and searching for it.","status":"failed","statusMessage":"Failed: Failed to search memory: Search results should be a list\nassert False\n +  where False = isinstance({'results': [{'created_at': '2025-05-25T15:24:14.930900-07:00', 'hash': '99f952b2cc23dd84527b49b016c6303d', 'id': '69bb41f8-8a8b-441f-8502-c5e2ce729642', 'memory': 'First memory entry for testing', ...}]}, list)","statusTrace":"self = <test_mem0_smoke.TestMem0Smoke object at 0x106d59880>\nmemory_instance = <mem0.memory.main.Memory object at 0x106d9ab10>\n\n    @allure.story(\"Basic Memory Operations\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_add_and_search_memory(self, memory_instance: Memory):\n        \"\"\"Test adding a memory entry and searching for it.\"\"\"\n        test_memory_text = \"My first memory entry for testing\"\n        test_metadata = {\"test\": \"yes\", \"category\": \"smoke_test\"}\n        test_user_id = \"test_user_123\"\n    \n        with allure.step(\"Add a sample memory\"):\n            try:\n                result = memory_instance.add(test_memory_text, user_id=test_user_id, metadata=test_metadata)\n    \n                allure.attach(\n                    str(result),\n                    name=\"Add Memory Result\",\n                    attachment_type=allure.attachment_type.TEXT\n                )\n    \n                # Verify the add operation was successful\n                assert result is not None, \"Memory add operation returned None\"\n                print(\"✅ Added a memory successfully\")\n    \n            except Exception as e:\n                allure.attach(\n                    f\"❌ Failed to add memory: {str(e)}\",\n                    name=\"Add Memory Error\",\n                    attachment_type=allure.attachment_type.TEXT\n                )\n                pytest.fail(f\"Failed to add memory: {str(e)}\")\n    \n        with allure.step(\"Search for the added memory\"):\n            try:\n                search_results = memory_instance.search(\"first memory\", user_id=test_user_id)\n    \n                allure.attach(\n                    str(search_results),\n                    name=\"Search Results\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n                # Verify search results\n>               assert isinstance(search_results, list), \"Search results should be a list\"\nE               AssertionError: Search results should be a list\nE               assert False\nE                +  where False = isinstance({'results': [{'created_at': '2025-05-25T15:24:14.930900-07:00', 'hash': '99f952b2cc23dd84527b49b016c6303d', 'id': '69bb41f8-8a8b-441f-8502-c5e2ce729642', 'memory': 'First memory entry for testing', ...}]}, list)\n\ntests/integration/test_mem0_smoke.py:166: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_mem0_smoke.TestMem0Smoke object at 0x106d59880>\nmemory_instance = <mem0.memory.main.Memory object at 0x106d9ab10>\n\n    @allure.story(\"Basic Memory Operations\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_add_and_search_memory(self, memory_instance: Memory):\n        \"\"\"Test adding a memory entry and searching for it.\"\"\"\n        test_memory_text = \"My first memory entry for testing\"\n        test_metadata = {\"test\": \"yes\", \"category\": \"smoke_test\"}\n        test_user_id = \"test_user_123\"\n    \n        with allure.step(\"Add a sample memory\"):\n            try:\n                result = memory_instance.add(test_memory_text, user_id=test_user_id, metadata=test_metadata)\n    \n                allure.attach(\n                    str(result),\n                    name=\"Add Memory Result\",\n                    attachment_type=allure.attachment_type.TEXT\n                )\n    \n                # Verify the add operation was successful\n                assert result is not None, \"Memory add operation returned None\"\n                print(\"✅ Added a memory successfully\")\n    \n            except Exception as e:\n                allure.attach(\n                    f\"❌ Failed to add memory: {str(e)}\",\n                    name=\"Add Memory Error\",\n                    attachment_type=allure.attachment_type.TEXT\n                )\n                pytest.fail(f\"Failed to add memory: {str(e)}\")\n    \n        with allure.step(\"Search for the added memory\"):\n            try:\n                search_results = memory_instance.search(\"first memory\", user_id=test_user_id)\n    \n                allure.attach(\n                    str(search_results),\n                    name=\"Search Results\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n                # Verify search results\n                assert isinstance(search_results, list), \"Search results should be a list\"\n                assert len(search_results) > 0, \"Search should return at least one result\"\n    \n                # Verify the content of the first result\n                first_result = search_results[0]\n                assert \"memory\" in first_result, \"Search result should contain 'memory' field\"\n    \n                result_text = first_result[\"memory\"]\n                assert isinstance(result_text, str), \"Result text should be a string\"\n                assert len(result_text) > 0, \"Result text should not be empty\"\n    \n                # Verify the search found relevant content\n                search_terms = [\"first\", \"memory\"]\n                found_relevant = any(term.lower() in result_text.lower() for term in search_terms)\n                assert found_relevant, f\"Search result '{result_text}' should contain relevant terms\"\n    \n                print(f\"\uD83D\uDD0D Search results: {[r['memory'] for r in search_results]}\")\n    \n            except Exception as e:\n                allure.attach(\n                    f\"❌ Failed to search memory: {str(e)}\",\n                    name=\"Search Memory Error\",\n                    attachment_type=allure.attachment_type.TEXT\n                )\n>               pytest.fail(f\"Failed to search memory: {str(e)}\")\nE               Failed: Failed to search memory: Search results should be a list\nE               assert False\nE                +  where False = isinstance({'results': [{'created_at': '2025-05-25T15:24:14.930900-07:00', 'hash': '99f952b2cc23dd84527b49b016c6303d', 'id': '69bb41f8-8a8b-441f-8502-c5e2ce729642', 'memory': 'First memory entry for testing', ...}]}, list)\n\ntests/integration/test_mem0_smoke.py:190: Failed","steps":[{"name":"Add a sample memory","time":{"start":1748211852010,"stop":1748211854960,"duration":2950},"status":"passed","steps":[],"attachments":[{"uid":"6bbfafac41f46af4","name":"Add Memory Result","source":"6bbfafac41f46af4.txt","type":"text/plain","size":121}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"Search for the added memory","time":{"start":1748211854960,"stop":1748211855576,"duration":616},"status":"failed","statusMessage":"Failed: Failed to search memory: Search results should be a list\nassert False\n +  where False = isinstance({'results': [{'created_at': '2025-05-25T15:24:14.930900-07:00', 'hash': '99f952b2cc23dd84527b49b016c6303d', 'id': '69bb41f8-8a8b-441f-8502-c5e2ce729642', 'memory': 'First memory entry for testing', ...}]}, list)\n","statusTrace":"  File \"/Users/samisabir-idrissi/code/ssiautomationsapps/mem01-ai-tutor/tests/integration/test_mem0_smoke.py\", line 190, in test_add_and_search_memory\n    pytest.fail(f\"Failed to search memory: {str(e)}\")\n  File \"/Users/samisabir-idrissi/code/ssiautomationsapps/mem01-ai-tutor/.venv/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[{"uid":"c70a1278286f2830","name":"Search Results","source":"c70a1278286f2830.json","type":"application/json","size":322},{"uid":"cbb0acecfcbaceb8","name":"Search Memory Error","source":"cbb0acecfcbaceb8.txt","type":"text/plain","size":314}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"e437109c3c7d1af4","name":"Exception","source":"e437109c3c7d1af4.txt","type":"text/plain","size":310},{"uid":"4a3b555daa0c871f","name":"log","source":"4a3b555daa0c871f.txt","type":"text/plain","size":2139},{"uid":"7f0eb74d44c34f42","name":"stdout","source":"7f0eb74d44c34f42.txt","type":"text/plain","size":32}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"story","value":"Basic Memory Operations"},{"name":"epic","value":"Memory Management"},{"name":"severity","value":"critical"},{"name":"feature","value":"Mem0 Vector Database Integration"},{"name":"parentSuite","value":"tests.integration"},{"name":"suite","value":"test_mem0_smoke"},{"name":"subSuite","value":"TestMem0Smoke"},{"name":"host","value":"samis-MacBook-Pro.local"},{"name":"thread","value":"9606-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.integration.test_mem0_smoke"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"c1b9b722df71b1ea.json","parameterValues":[]}